//Bruteforce Approach

class Solution {
    static char nonrepeatingCharacter(String str) {
        char[] arr = str.toCharArray();

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == '1') {
                continue;
            }

            boolean isRepeating = false;

            int j;
            for (j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    arr[j] = '1';
                    isRepeating = true;
                }
            }

            if (!isRepeating) {
                return arr[i];
            }
        }
        return '$';
    }
}


//Better Approach

class Solution {
    static char nonrepeatingCharacter(String str) {
        Map<Character, Integer> frequencyMap = new LinkedHashMap<>();
        
        for (int i = 0; i < str.length(); i++) {
            frequencyMap.put(str.charAt(i), frequencyMap.getOrDefault(str.charAt(i), 0) + 1);
        }

        for (char ch : frequencyMap.keySet()) {
            if (frequencyMap.get(ch) == 1) {
                return ch;
            }
        }

        return '$';
    }
}


//Optimal Approach

class Solution {
    static char nonrepeatingCharacter(String str) {
        int[] frequencyArray = new int[26];

        for (int i = 0; i < str.length(); i++) {
            frequencyArray[str.charAt(i) - 'a']++;
        }

        for (int i = 0; i < str.length(); i++) {
            if (frequencyArray[str.charAt(i) - 'a'] == 1) {
                return str.charAt(i);
            }
        }

        return '$';
    }
}
