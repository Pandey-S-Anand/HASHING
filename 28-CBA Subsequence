/*
Important Testcase :

For Input:
8 pdmxxtga

It's Correct output is:
adgmptxx
*/

//Naive Approach

/*
To avoid the subsequence "cba," we need to ensure that the characters 'c', 'b', and 'a' don't appear in the specific order where 'c' comes before 'b' and 'b' comes before 'a'.
By sorting the string, we automatically disturb the order of 'c', 'b', and 'a'. In the sorted string, all occurrences of 'a' will come before 'b', and all 'b' will come before 'c'.
This guarantees that the "cba" subsequence cannot form.
*/

class Solution {
    String cbaSubsequence(String str, int n) {
        char[] charArray = str.toCharArray();
        Arrays.sort(charArray);
        return new String(charArray);
    }
}


//Aliter

class Solution {
    String cbaSubsequence(String str, int n) {
        Map<Character, Integer> frequencyMap = new TreeMap<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            frequencyMap.put(ch, frequencyMap.getOrDefault(ch, 0) + 1);
        }

        StringBuilder result = new StringBuilder();

        for (char ch : frequencyMap.keySet()) {
            int count = frequencyMap.get(ch);
            for (int i = 0; i < count; i++) {
                result.append(ch);
            }
        }

        return result.toString();
    }
}



//Aliter

class Solution {
    String cbaSubsequence(String str, int n) {
        Map<Character, Integer> frequencyMap = new HashMap<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            frequencyMap.put(ch, frequencyMap.getOrDefault(ch, 0) + 1);
        }

        StringBuilder result = new StringBuilder();

        // Place all 'a's at the beginning to prevent "cba" from forming
        if (frequencyMap.containsKey('a')) {
            int countA = frequencyMap.get('a');
            for (int i = 0; i < countA; i++) {
                result.append('a');
            }
            frequencyMap.remove('a'); // Remove 'a' from the map
        }

        // Sort the remaining characters
        List<Character> remainingChars = new ArrayList<>(frequencyMap.keySet());
        Collections.sort(remainingChars);

        // Append sorted characters to the result
        for (char ch : remainingChars) {
            int count = frequencyMap.get(ch);
            for (int i = 0; i < count; i++) {
                result.append(ch);
            }
        }

        return result.toString();
    }
}



//Optimal Approach

class Solution {
    String cbaSubsequence(String str, int n) {
        int[] frequencyArray = new int[26];

        for (int i = 0; i < str.length(); i++) {
            frequencyArray[str.charAt(i) - 'a']++;
        }

        StringBuilder result = new StringBuilder();

        for (int i = 0; i < 26; i++) {
            if (frequencyArray[i] != 0) {
                int count = frequencyArray[i];
                for (int j = 0; j < count; j++) {
                    result.append((char) (i + 'a'));
                }
            }
        }

        return result.toString();
    }
}
