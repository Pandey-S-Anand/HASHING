//Bruteforce Approach

class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }

        char[] arr1 = s.toCharArray();
        char[] arr2 = t.toCharArray();

        Arrays.sort(arr1);
        Arrays.sort(arr2);

        return Arrays.equals(arr1, arr2);
    }
}


//Better Approach

class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }

        Map<Character, Integer> frequencyMap = new HashMap<>();

        for (int i = 0; i < s.length(); i++) {
            frequencyMap.put(s.charAt(i), frequencyMap.getOrDefault(s.charAt(i), 0) + 1);
        }

        for (int i = 0; i < t.length(); i++) {
            if (!frequencyMap.containsKey(t.charAt(i))) {
                return false;
            }

            if (frequencyMap.get(t.charAt(i)) == 1) {
                frequencyMap.remove(t.charAt(i));
            } else {
                frequencyMap.put(t.charAt(i), frequencyMap.get(t.charAt(i)) - 1);
            }
        }

        if (frequencyMap.isEmpty()) {
            return true;
        }

        return false;
    }
}


//Optimal Approach

class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }

        int[] frequencyArray = new int[26];

        for (int i = 0; i < s.length(); i++) {
            frequencyArray[s.charAt(i) - 'a']++;
        }

        for (int i = 0; i < t.length(); i++) {
            frequencyArray[t.charAt(i) - 'a']--;
        }

        for (int i = 0; i < 26; i++) {
            if (frequencyArray[i] != 0) {
                return false;
            }
        }

        return true;
    }
}
