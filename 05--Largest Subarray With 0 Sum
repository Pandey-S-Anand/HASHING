// Bruteforce Approach

class GfG {
    int maxLen(int arr[], int n) {
        int maxLength = 0;
        for (int start = 0; start < n; start++) {
            for (int end = start; end < n; end++) {
                int sum = 0;
                for (int range = start; range <= end; range++) {
                    sum += arr[range];
                }

                if (sum == 0) {
                    maxLength = Math.max((end - start + 1), maxLength);
                }
            }
        }

        return maxLength;
    }
}



//Better Approach

class GfG {
    int maxLen(int arr[], int n) {
        int maxLength = 0;
        for (int start = 0; start < n; start++) {
            int subarraySum = 0;
            for (int end = start; end < n; end++) {
                subarraySum += arr[end];

                if (subarraySum == 0) {
                    maxLength = Math.max((end - start + 1), maxLength);
                }
            }
        }

        return maxLength;
    }
}



//Optimal Approach

class GfG {
    int maxLen(int arr[], int n) {
        Map<Integer, Integer> sumIndexMap = new HashMap<>();
        int prefixSum = 0, maxLength = 0;

        for (int i = 0; i < n; i++) {
            prefixSum += arr[i];

            if (prefixSum == 0) {
                maxLength = Math.max(i + 1, maxLength);
            }

            if (sumIndexMap.containsKey(prefixSum)) {
                maxLength = Math.max(i - sumIndexMap.get(prefixSum), maxLength);
            } else {
                sumIndexMap.put(prefixSum, i);
            }
        }

        return maxLength;
    }
}
