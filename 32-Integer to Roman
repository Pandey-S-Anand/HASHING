//Bruteforce Approach

class Solution {
    private static final Map<Integer, String> ROMAN_NUMERAL_MAP;

    static {
        ROMAN_NUMERAL_MAP = new LinkedHashMap<>();
        ROMAN_NUMERAL_MAP.put(1000, "M");
        ROMAN_NUMERAL_MAP.put(900, "CM"); // Special Case
        ROMAN_NUMERAL_MAP.put(500, "D");
        ROMAN_NUMERAL_MAP.put(400, "CD"); // Special Case
        ROMAN_NUMERAL_MAP.put(100, "C");
        ROMAN_NUMERAL_MAP.put(90, "XC"); // Special Case
        ROMAN_NUMERAL_MAP.put(50, "L");
        ROMAN_NUMERAL_MAP.put(40, "XL"); // Special Case
        ROMAN_NUMERAL_MAP.put(10, "X");
        ROMAN_NUMERAL_MAP.put(9, "IX"); // Special Case
        ROMAN_NUMERAL_MAP.put(5, "V");
        ROMAN_NUMERAL_MAP.put(4, "IV"); // Special Case
        ROMAN_NUMERAL_MAP.put(1, "I");
    }

    public String intToRoman(int num) {
        StringBuilder romanNumeral = new StringBuilder();

        for (int key : ROMAN_NUMERAL_MAP.keySet()) {
            int count = (num / key);
            while (count-- > 0) {
                romanNumeral.append(ROMAN_NUMERAL_MAP.get(key));
            }

            num = num % key;
        }
        return romanNumeral.toString();
    }
}


//Optimal Approach

class Solution {
    private static final int[] DECIMAL_VALUES = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };
    private static final String[] ROMAN_SYMBOLS = { "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" };

    public String intToRoman(int num) {
        StringBuilder romanNumeral = new StringBuilder();

        for (int i = 0; i < ROMAN_SYMBOLS.length; i++) {
            int count = (num / DECIMAL_VALUES[i]);
            while (count-- > 0) {
                romanNumeral.append(ROMAN_SYMBOLS[i]);
            }

            num = num % DECIMAL_VALUES[i];
        }

        return romanNumeral.toString();
    }
}

//Aliter

class Solution {
    private static final RomanNumeral[] ROMAN_NUMERAL_PAIRS = {
            new RomanNumeral(1000, "M"),
            new RomanNumeral(900, "CM"),
            new RomanNumeral(500, "D"),
            new RomanNumeral(400, "CD"),
            new RomanNumeral(100, "C"),
            new RomanNumeral(90, "XC"),
            new RomanNumeral(50, "L"),
            new RomanNumeral(40, "XL"),
            new RomanNumeral(10, "X"),
            new RomanNumeral(9, "IX"),
            new RomanNumeral(5, "V"),
            new RomanNumeral(4, "IV"),
            new RomanNumeral(1, "I")
    };

    public String intToRoman(int num) {
        StringBuilder romanNumeral = new StringBuilder();

        for (RomanNumeral pair : ROMAN_NUMERAL_PAIRS) {
            int count = num / pair.value;
            while (count-- > 0) {
                romanNumeral.append(pair.symbol);
            }
            num = num % pair.value;
        }

        return romanNumeral.toString();
    }

    private static class RomanNumeral {
        int value;
        String symbol;

        RomanNumeral(int value, String symbol) {
            this.value = value;
            this.symbol = symbol;
        }
    }
}
